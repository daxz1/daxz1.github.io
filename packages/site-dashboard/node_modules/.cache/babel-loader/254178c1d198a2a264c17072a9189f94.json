{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getQueryArgs } from '../core/utils';\nimport { useBaseQuery } from './useBaseQuery'; // A paginated query is more like a \"lag\" query, which means\n// as the query key changes, we keep the results from the\n// last query and use them as placeholder data in the next one\n// We DON'T use it as initial data though. That's important\n// TYPES\n// Implementation\n\nexport function usePaginatedQuery(arg1, arg2, arg3) {\n  var _getQueryArgs = getQueryArgs(arg1, arg2, arg3),\n      queryKey = _getQueryArgs[0],\n      config = _getQueryArgs[1];\n\n  var result = useBaseQuery(queryKey, _extends({\n    keepPreviousData: true\n  }, config));\n  return _extends({}, result, {\n    resolvedData: result.data,\n    latestData: result.isPreviousData ? undefined : result.data\n  });\n}","map":{"version":3,"sources":["/Users/dcheema/Projects/daxz1.github.io/node_modules/react-query/es/react/usePaginatedQuery.js"],"names":["_extends","getQueryArgs","useBaseQuery","usePaginatedQuery","arg1","arg2","arg3","_getQueryArgs","queryKey","config","result","keepPreviousData","resolvedData","data","latestData","isPreviousData","undefined"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,YAAT,QAA6B,gBAA7B,C,CAA+C;AAC/C;AACA;AACA;AACA;AAEA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,IAAjC,EAAuCC,IAAvC,EAA6C;AAClD,MAAIC,aAAa,GAAGN,YAAY,CAACG,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAAhC;AAAA,MACIE,QAAQ,GAAGD,aAAa,CAAC,CAAD,CAD5B;AAAA,MAEIE,MAAM,GAAGF,aAAa,CAAC,CAAD,CAF1B;;AAIA,MAAIG,MAAM,GAAGR,YAAY,CAACM,QAAD,EAAWR,QAAQ,CAAC;AAC3CW,IAAAA,gBAAgB,EAAE;AADyB,GAAD,EAEzCF,MAFyC,CAAnB,CAAzB;AAGA,SAAOT,QAAQ,CAAC,EAAD,EAAKU,MAAL,EAAa;AAC1BE,IAAAA,YAAY,EAAEF,MAAM,CAACG,IADK;AAE1BC,IAAAA,UAAU,EAAEJ,MAAM,CAACK,cAAP,GAAwBC,SAAxB,GAAoCN,MAAM,CAACG;AAF7B,GAAb,CAAf;AAID","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getQueryArgs } from '../core/utils';\nimport { useBaseQuery } from './useBaseQuery'; // A paginated query is more like a \"lag\" query, which means\n// as the query key changes, we keep the results from the\n// last query and use them as placeholder data in the next one\n// We DON'T use it as initial data though. That's important\n// TYPES\n\n// Implementation\nexport function usePaginatedQuery(arg1, arg2, arg3) {\n  var _getQueryArgs = getQueryArgs(arg1, arg2, arg3),\n      queryKey = _getQueryArgs[0],\n      config = _getQueryArgs[1];\n\n  var result = useBaseQuery(queryKey, _extends({\n    keepPreviousData: true\n  }, config));\n  return _extends({}, result, {\n    resolvedData: result.data,\n    latestData: result.isPreviousData ? undefined : result.data\n  });\n}"]},"metadata":{},"sourceType":"module"}