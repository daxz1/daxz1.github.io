{"ast":null,"code":"import React from 'react';\nimport { useIsMounted } from './utils';\nimport { getResolvedQueryConfig } from '../core/config';\nimport { QueryObserver } from '../core/queryObserver';\nimport { useErrorResetBoundary } from './ReactQueryErrorResetBoundary';\nimport { useQueryCache } from './ReactQueryCacheProvider';\nimport { useContextConfig } from './ReactQueryConfigProvider';\nexport function useBaseQuery(queryKey, config) {\n  var _React$useReducer = React.useReducer(function (c) {\n    return c + 1;\n  }, 0),\n      rerender = _React$useReducer[1];\n\n  var isMounted = useIsMounted();\n  var cache = useQueryCache();\n  var contextConfig = useContextConfig();\n  var errorResetBoundary = useErrorResetBoundary(); // Get resolved config\n\n  var resolvedConfig = getResolvedQueryConfig(cache, queryKey, contextConfig, config); // Create query observer\n\n  var observerRef = React.useRef();\n  var firstRender = !observerRef.current;\n  var observer = observerRef.current || new QueryObserver(resolvedConfig);\n  observerRef.current = observer; // Subscribe to the observer\n\n  React.useEffect(function () {\n    errorResetBoundary.clearReset();\n    return observer.subscribe(function () {\n      if (isMounted()) {\n        rerender();\n      }\n    });\n  }, [isMounted, observer, rerender, errorResetBoundary]); // Update config\n\n  if (!firstRender) {\n    observer.updateConfig(resolvedConfig);\n  }\n\n  var result = observer.getCurrentResult(); // Handle suspense\n\n  if (resolvedConfig.suspense || resolvedConfig.useErrorBoundary) {\n    var query = observer.getCurrentQuery();\n\n    if (result.isError && !errorResetBoundary.isReset() && query.state.throwInErrorBoundary) {\n      throw result.error;\n    }\n\n    if (resolvedConfig.enabled && resolvedConfig.suspense && !result.isSuccess) {\n      errorResetBoundary.clearReset();\n      var unsubscribe = observer.subscribe();\n      throw observer.fetch().finally(unsubscribe);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/dcheema/Projects/daxz1.github.io/node_modules/react-query/es/react/useBaseQuery.js"],"names":["React","useIsMounted","getResolvedQueryConfig","QueryObserver","useErrorResetBoundary","useQueryCache","useContextConfig","useBaseQuery","queryKey","config","_React$useReducer","useReducer","c","rerender","isMounted","cache","contextConfig","errorResetBoundary","resolvedConfig","observerRef","useRef","firstRender","current","observer","useEffect","clearReset","subscribe","updateConfig","result","getCurrentResult","suspense","useErrorBoundary","query","getCurrentQuery","isError","isReset","state","throwInErrorBoundary","error","enabled","isSuccess","unsubscribe","fetch","finally"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,SAASC,sBAAT,QAAuC,gBAAvC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,qBAAT,QAAsC,gCAAtC;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,MAAhC,EAAwC;AAC7C,MAAIC,iBAAiB,GAAGV,KAAK,CAACW,UAAN,CAAiB,UAAUC,CAAV,EAAa;AACpD,WAAOA,CAAC,GAAG,CAAX;AACD,GAFuB,EAErB,CAFqB,CAAxB;AAAA,MAGIC,QAAQ,GAAGH,iBAAiB,CAAC,CAAD,CAHhC;;AAKA,MAAII,SAAS,GAAGb,YAAY,EAA5B;AACA,MAAIc,KAAK,GAAGV,aAAa,EAAzB;AACA,MAAIW,aAAa,GAAGV,gBAAgB,EAApC;AACA,MAAIW,kBAAkB,GAAGb,qBAAqB,EAA9C,CAT6C,CASK;;AAElD,MAAIc,cAAc,GAAGhB,sBAAsB,CAACa,KAAD,EAAQP,QAAR,EAAkBQ,aAAlB,EAAiCP,MAAjC,CAA3C,CAX6C,CAWwC;;AAErF,MAAIU,WAAW,GAAGnB,KAAK,CAACoB,MAAN,EAAlB;AACA,MAAIC,WAAW,GAAG,CAACF,WAAW,CAACG,OAA/B;AACA,MAAIC,QAAQ,GAAGJ,WAAW,CAACG,OAAZ,IAAuB,IAAInB,aAAJ,CAAkBe,cAAlB,CAAtC;AACAC,EAAAA,WAAW,CAACG,OAAZ,GAAsBC,QAAtB,CAhB6C,CAgBb;;AAEhCvB,EAAAA,KAAK,CAACwB,SAAN,CAAgB,YAAY;AAC1BP,IAAAA,kBAAkB,CAACQ,UAAnB;AACA,WAAOF,QAAQ,CAACG,SAAT,CAAmB,YAAY;AACpC,UAAIZ,SAAS,EAAb,EAAiB;AACfD,QAAAA,QAAQ;AACT;AACF,KAJM,CAAP;AAKD,GAPD,EAOG,CAACC,SAAD,EAAYS,QAAZ,EAAsBV,QAAtB,EAAgCI,kBAAhC,CAPH,EAlB6C,CAyBY;;AAEzD,MAAI,CAACI,WAAL,EAAkB;AAChBE,IAAAA,QAAQ,CAACI,YAAT,CAAsBT,cAAtB;AACD;;AAED,MAAIU,MAAM,GAAGL,QAAQ,CAACM,gBAAT,EAAb,CA/B6C,CA+BH;;AAE1C,MAAIX,cAAc,CAACY,QAAf,IAA2BZ,cAAc,CAACa,gBAA9C,EAAgE;AAC9D,QAAIC,KAAK,GAAGT,QAAQ,CAACU,eAAT,EAAZ;;AAEA,QAAIL,MAAM,CAACM,OAAP,IAAkB,CAACjB,kBAAkB,CAACkB,OAAnB,EAAnB,IAAmDH,KAAK,CAACI,KAAN,CAAYC,oBAAnE,EAAyF;AACvF,YAAMT,MAAM,CAACU,KAAb;AACD;;AAED,QAAIpB,cAAc,CAACqB,OAAf,IAA0BrB,cAAc,CAACY,QAAzC,IAAqD,CAACF,MAAM,CAACY,SAAjE,EAA4E;AAC1EvB,MAAAA,kBAAkB,CAACQ,UAAnB;AACA,UAAIgB,WAAW,GAAGlB,QAAQ,CAACG,SAAT,EAAlB;AACA,YAAMH,QAAQ,CAACmB,KAAT,GAAiBC,OAAjB,CAAyBF,WAAzB,CAAN;AACD;AACF;;AAED,SAAOb,MAAP;AACD","sourcesContent":["import React from 'react';\nimport { useIsMounted } from './utils';\nimport { getResolvedQueryConfig } from '../core/config';\nimport { QueryObserver } from '../core/queryObserver';\nimport { useErrorResetBoundary } from './ReactQueryErrorResetBoundary';\nimport { useQueryCache } from './ReactQueryCacheProvider';\nimport { useContextConfig } from './ReactQueryConfigProvider';\nexport function useBaseQuery(queryKey, config) {\n  var _React$useReducer = React.useReducer(function (c) {\n    return c + 1;\n  }, 0),\n      rerender = _React$useReducer[1];\n\n  var isMounted = useIsMounted();\n  var cache = useQueryCache();\n  var contextConfig = useContextConfig();\n  var errorResetBoundary = useErrorResetBoundary(); // Get resolved config\n\n  var resolvedConfig = getResolvedQueryConfig(cache, queryKey, contextConfig, config); // Create query observer\n\n  var observerRef = React.useRef();\n  var firstRender = !observerRef.current;\n  var observer = observerRef.current || new QueryObserver(resolvedConfig);\n  observerRef.current = observer; // Subscribe to the observer\n\n  React.useEffect(function () {\n    errorResetBoundary.clearReset();\n    return observer.subscribe(function () {\n      if (isMounted()) {\n        rerender();\n      }\n    });\n  }, [isMounted, observer, rerender, errorResetBoundary]); // Update config\n\n  if (!firstRender) {\n    observer.updateConfig(resolvedConfig);\n  }\n\n  var result = observer.getCurrentResult(); // Handle suspense\n\n  if (resolvedConfig.suspense || resolvedConfig.useErrorBoundary) {\n    var query = observer.getCurrentQuery();\n\n    if (result.isError && !errorResetBoundary.isReset() && query.state.throwInErrorBoundary) {\n      throw result.error;\n    }\n\n    if (resolvedConfig.enabled && resolvedConfig.suspense && !result.isSuccess) {\n      errorResetBoundary.clearReset();\n      var unsubscribe = observer.subscribe();\n      throw observer.fetch().finally(unsubscribe);\n    }\n  }\n\n  return result;\n}"]},"metadata":{},"sourceType":"module"}