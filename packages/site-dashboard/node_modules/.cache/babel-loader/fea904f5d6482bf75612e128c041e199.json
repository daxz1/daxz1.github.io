{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { deepIncludes, getQueryArgs, isDocumentVisible, isOnline, isPlainObject, isServer, noop } from './utils';\nimport { getResolvedQueryConfig as _getResolvedQueryConfig } from './config';\nimport { Query } from './query';\nimport { notifyManager } from './notifyManager';\nimport { QueryObserver } from './queryObserver'; // TYPES\n// CLASS\n\nexport var QueryCache = /*#__PURE__*/function () {\n  function QueryCache(config) {\n    this.config = config || {};\n    this.globalListeners = [];\n    this.queries = {};\n    this.queriesArray = [];\n    this.isFetching = 0;\n  }\n\n  var _proto = QueryCache.prototype;\n\n  _proto.notifyGlobalListeners = function notifyGlobalListeners(query) {\n    var _this = this;\n\n    this.isFetching = this.getQueries().reduce(function (acc, q) {\n      return q.state.isFetching ? acc + 1 : acc;\n    }, 0);\n    notifyManager.batch(function () {\n      _this.globalListeners.forEach(function (listener) {\n        notifyManager.schedule(function () {\n          listener(_this, query);\n        });\n      });\n    });\n  };\n\n  _proto.getDefaultConfig = function getDefaultConfig() {\n    return this.config.defaultConfig;\n  };\n\n  _proto.getResolvedQueryConfig = function getResolvedQueryConfig(queryKey, config) {\n    return _getResolvedQueryConfig(this, queryKey, undefined, config);\n  };\n\n  _proto.subscribe = function subscribe(listener) {\n    var _this2 = this;\n\n    this.globalListeners.push(listener);\n    return function () {\n      _this2.globalListeners = _this2.globalListeners.filter(function (x) {\n        return x !== listener;\n      });\n    };\n  };\n\n  _proto.clear = function clear(options) {\n    this.removeQueries();\n\n    if (options == null ? void 0 : options.notify) {\n      this.notifyGlobalListeners();\n    }\n  };\n\n  _proto.getQueries = function getQueries(predicate, options) {\n    var anyKey = predicate === true || typeof predicate === 'undefined';\n\n    if (anyKey && !options) {\n      return this.queriesArray;\n    }\n\n    var predicateFn;\n\n    if (typeof predicate === 'function') {\n      predicateFn = predicate;\n    } else {\n      var _ref = options || {},\n          exact = _ref.exact,\n          active = _ref.active,\n          stale = _ref.stale;\n\n      var resolvedConfig = this.getResolvedQueryConfig(predicate);\n\n      predicateFn = function predicateFn(query) {\n        // Check query key if needed\n        if (!anyKey) {\n          if (exact) {\n            // Check if the query key matches exactly\n            if (query.queryHash !== resolvedConfig.queryHash) {\n              return false;\n            }\n          } else {\n            // Check if the query key matches partially\n            if (!deepIncludes(query.queryKey, resolvedConfig.queryKey)) {\n              return false;\n            }\n          }\n        } // Check active state if needed\n\n\n        if (typeof active === 'boolean' && query.isActive() !== active) {\n          return false;\n        } // Check stale state if needed\n\n\n        if (typeof stale === 'boolean' && query.isStale() !== stale) {\n          return false;\n        }\n\n        return true;\n      };\n    }\n\n    return this.queriesArray.filter(predicateFn);\n  };\n\n  _proto.getQuery = function getQuery(predicate) {\n    return this.getQueries(predicate, {\n      exact: true\n    })[0];\n  };\n\n  _proto.getQueryByHash = function getQueryByHash(queryHash) {\n    return this.queries[queryHash];\n  };\n\n  _proto.getQueryData = function getQueryData(predicate) {\n    var _this$getQuery;\n\n    return (_this$getQuery = this.getQuery(predicate)) == null ? void 0 : _this$getQuery.state.data;\n  };\n\n  _proto.removeQuery = function removeQuery(query) {\n    if (this.queries[query.queryHash]) {\n      query.destroy();\n      delete this.queries[query.queryHash];\n      this.queriesArray = this.queriesArray.filter(function (x) {\n        return x !== query;\n      });\n      this.notifyGlobalListeners(query);\n    }\n  };\n\n  _proto.removeQueries = function removeQueries(predicate, options) {\n    var _this3 = this;\n\n    this.getQueries(predicate, options).forEach(function (query) {\n      _this3.removeQuery(query);\n    });\n  };\n\n  _proto.cancelQueries = function cancelQueries(predicate, options) {\n    this.getQueries(predicate, options).forEach(function (query) {\n      query.cancel();\n    });\n  }\n  /**\n   * @return Promise resolving to an array with the invalidated queries.\n   */\n  ;\n\n  _proto.invalidateQueries = function invalidateQueries(predicate, options) {\n    var queries = this.getQueries(predicate, options);\n    notifyManager.batch(function () {\n      queries.forEach(function (query) {\n        query.invalidate();\n      });\n    });\n\n    var _ref2 = options || {},\n        _ref2$refetchActive = _ref2.refetchActive,\n        refetchActive = _ref2$refetchActive === void 0 ? true : _ref2$refetchActive,\n        _ref2$refetchInactive = _ref2.refetchInactive,\n        refetchInactive = _ref2$refetchInactive === void 0 ? false : _ref2$refetchInactive;\n\n    if (!refetchInactive && !refetchActive) {\n      return Promise.resolve(queries);\n    }\n\n    var refetchOptions = _extends({}, options);\n\n    if (refetchActive && !refetchInactive) {\n      refetchOptions.active = true;\n    } else if (refetchInactive && !refetchActive) {\n      refetchOptions.active = false;\n    }\n\n    var promise = this.refetchQueries(predicate, refetchOptions);\n\n    if (!(options == null ? void 0 : options.throwOnError)) {\n      promise = promise.catch(function () {\n        return queries;\n      });\n    }\n\n    return promise.then(function () {\n      return queries;\n    });\n  }\n  /**\n   * @return Promise resolving to an array with the refetched queries.\n   */\n  ;\n\n  _proto.refetchQueries = function refetchQueries(predicate, options) {\n    var _this4 = this;\n\n    var promises = [];\n    notifyManager.batch(function () {\n      _this4.getQueries(predicate, options).forEach(function (query) {\n        var promise = query.fetch().then(function () {\n          return query;\n        });\n\n        if (!(options == null ? void 0 : options.throwOnError)) {\n          promise = promise.catch(function () {\n            return query;\n          });\n        }\n\n        promises.push(promise);\n      });\n    });\n    return Promise.all(promises);\n  };\n\n  _proto.resetErrorBoundaries = function resetErrorBoundaries() {\n    this.getQueries().forEach(function (query) {\n      query.state.throwInErrorBoundary = false;\n    });\n  };\n\n  _proto.buildQuery = function buildQuery(queryKey, config) {\n    var resolvedConfig = this.getResolvedQueryConfig(queryKey, config);\n    var query = this.getQueryByHash(resolvedConfig.queryHash);\n\n    if (!query) {\n      query = this.createQuery(resolvedConfig);\n    }\n\n    return query;\n  };\n\n  _proto.createQuery = function createQuery(config) {\n    var query = new Query(config); // A frozen cache does not add new queries to the cache\n\n    if (!this.config.frozen) {\n      this.queries[query.queryHash] = query;\n      this.queriesArray.push(query);\n      this.notifyGlobalListeners(query);\n    }\n\n    return query;\n  } // Parameter syntax\n  ; // Implementation\n\n\n  _proto.fetchQuery = function fetchQuery(arg1, arg2, arg3) {\n    var _getQueryArgs = getQueryArgs(arg1, arg2, arg3),\n        queryKey = _getQueryArgs[0],\n        config = _getQueryArgs[1];\n\n    var resolvedConfig = this.getResolvedQueryConfig(queryKey, _extends({\n      // https://github.com/tannerlinsley/react-query/issues/652\n      retry: false\n    }, config));\n    var query = this.getQueryByHash(resolvedConfig.queryHash);\n\n    if (!query) {\n      query = this.createQuery(resolvedConfig);\n    }\n\n    if (!query.isStaleByTime(config.staleTime)) {\n      return Promise.resolve(query.state.data);\n    }\n\n    return query.fetch(undefined, resolvedConfig);\n  } // Parameter syntax with optional prefetch options\n  ; // Implementation\n\n\n  _proto.prefetchQuery = function prefetchQuery(arg1, arg2, arg3, arg4) {\n    if (isPlainObject(arg2) && (arg2.hasOwnProperty('throwOnError') || arg2.hasOwnProperty('force'))) {\n      arg4 = arg2;\n      arg2 = undefined;\n      arg3 = undefined;\n    }\n\n    var _getQueryArgs2 = getQueryArgs(arg1, arg2, arg3, arg4),\n        queryKey = _getQueryArgs2[0],\n        config = _getQueryArgs2[1],\n        options = _getQueryArgs2[2];\n\n    if (options == null ? void 0 : options.force) {\n      config.staleTime = 0;\n    }\n\n    var promise = this.fetchQuery(queryKey, config);\n\n    if (!(options == null ? void 0 : options.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  } // Parameter syntax\n  ; // Implementation\n\n\n  _proto.watchQuery = function watchQuery(arg1, arg2, arg3) {\n    var _getQueryArgs3 = getQueryArgs(arg1, arg2, arg3),\n        queryKey = _getQueryArgs3[0],\n        config = _getQueryArgs3[1];\n\n    var resolvedConfig = this.getResolvedQueryConfig(queryKey, config);\n    return new QueryObserver(resolvedConfig);\n  };\n\n  _proto.setQueryData = function setQueryData(queryKey, updater, config) {\n    this.buildQuery(queryKey, config).setData(updater);\n  };\n\n  return QueryCache;\n}();\nvar defaultQueryCache = new QueryCache({\n  frozen: isServer\n});\nexport { defaultQueryCache as queryCache };\nexport var queryCaches = [defaultQueryCache];\n/**\n * @deprecated\n */\n\nexport function makeQueryCache(config) {\n  return new QueryCache(config);\n}\nexport function onVisibilityOrOnlineChange(type) {\n  if (isDocumentVisible() && isOnline()) {\n    notifyManager.batch(function () {\n      queryCaches.forEach(function (queryCache) {\n        queryCache.getQueries().forEach(function (query) {\n          query.onInteraction(type);\n        });\n      });\n    });\n  }\n}","map":{"version":3,"sources":["/Users/dcheema/Projects/daxz1.github.io/node_modules/react-query/es/core/queryCache.js"],"names":["_extends","deepIncludes","getQueryArgs","isDocumentVisible","isOnline","isPlainObject","isServer","noop","getResolvedQueryConfig","_getResolvedQueryConfig","Query","notifyManager","QueryObserver","QueryCache","config","globalListeners","queries","queriesArray","isFetching","_proto","prototype","notifyGlobalListeners","query","_this","getQueries","reduce","acc","q","state","batch","forEach","listener","schedule","getDefaultConfig","defaultConfig","queryKey","undefined","subscribe","_this2","push","filter","x","clear","options","removeQueries","notify","predicate","anyKey","predicateFn","_ref","exact","active","stale","resolvedConfig","queryHash","isActive","isStale","getQuery","getQueryByHash","getQueryData","_this$getQuery","data","removeQuery","destroy","_this3","cancelQueries","cancel","invalidateQueries","invalidate","_ref2","_ref2$refetchActive","refetchActive","_ref2$refetchInactive","refetchInactive","Promise","resolve","refetchOptions","promise","refetchQueries","throwOnError","catch","then","_this4","promises","fetch","all","resetErrorBoundaries","throwInErrorBoundary","buildQuery","createQuery","frozen","fetchQuery","arg1","arg2","arg3","_getQueryArgs","retry","isStaleByTime","staleTime","prefetchQuery","arg4","hasOwnProperty","_getQueryArgs2","force","watchQuery","_getQueryArgs3","setQueryData","updater","setData","defaultQueryCache","queryCache","queryCaches","makeQueryCache","onVisibilityOrOnlineChange","type","onInteraction"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { deepIncludes, getQueryArgs, isDocumentVisible, isOnline, isPlainObject, isServer, noop } from './utils';\nimport { getResolvedQueryConfig as _getResolvedQueryConfig } from './config';\nimport { Query } from './query';\nimport { notifyManager } from './notifyManager';\nimport { QueryObserver } from './queryObserver'; // TYPES\n\n// CLASS\nexport var QueryCache = /*#__PURE__*/function () {\n  function QueryCache(config) {\n    this.config = config || {};\n    this.globalListeners = [];\n    this.queries = {};\n    this.queriesArray = [];\n    this.isFetching = 0;\n  }\n\n  var _proto = QueryCache.prototype;\n\n  _proto.notifyGlobalListeners = function notifyGlobalListeners(query) {\n    var _this = this;\n\n    this.isFetching = this.getQueries().reduce(function (acc, q) {\n      return q.state.isFetching ? acc + 1 : acc;\n    }, 0);\n    notifyManager.batch(function () {\n      _this.globalListeners.forEach(function (listener) {\n        notifyManager.schedule(function () {\n          listener(_this, query);\n        });\n      });\n    });\n  };\n\n  _proto.getDefaultConfig = function getDefaultConfig() {\n    return this.config.defaultConfig;\n  };\n\n  _proto.getResolvedQueryConfig = function getResolvedQueryConfig(queryKey, config) {\n    return _getResolvedQueryConfig(this, queryKey, undefined, config);\n  };\n\n  _proto.subscribe = function subscribe(listener) {\n    var _this2 = this;\n\n    this.globalListeners.push(listener);\n    return function () {\n      _this2.globalListeners = _this2.globalListeners.filter(function (x) {\n        return x !== listener;\n      });\n    };\n  };\n\n  _proto.clear = function clear(options) {\n    this.removeQueries();\n\n    if (options == null ? void 0 : options.notify) {\n      this.notifyGlobalListeners();\n    }\n  };\n\n  _proto.getQueries = function getQueries(predicate, options) {\n    var anyKey = predicate === true || typeof predicate === 'undefined';\n\n    if (anyKey && !options) {\n      return this.queriesArray;\n    }\n\n    var predicateFn;\n\n    if (typeof predicate === 'function') {\n      predicateFn = predicate;\n    } else {\n      var _ref = options || {},\n          exact = _ref.exact,\n          active = _ref.active,\n          stale = _ref.stale;\n\n      var resolvedConfig = this.getResolvedQueryConfig(predicate);\n\n      predicateFn = function predicateFn(query) {\n        // Check query key if needed\n        if (!anyKey) {\n          if (exact) {\n            // Check if the query key matches exactly\n            if (query.queryHash !== resolvedConfig.queryHash) {\n              return false;\n            }\n          } else {\n            // Check if the query key matches partially\n            if (!deepIncludes(query.queryKey, resolvedConfig.queryKey)) {\n              return false;\n            }\n          }\n        } // Check active state if needed\n\n\n        if (typeof active === 'boolean' && query.isActive() !== active) {\n          return false;\n        } // Check stale state if needed\n\n\n        if (typeof stale === 'boolean' && query.isStale() !== stale) {\n          return false;\n        }\n\n        return true;\n      };\n    }\n\n    return this.queriesArray.filter(predicateFn);\n  };\n\n  _proto.getQuery = function getQuery(predicate) {\n    return this.getQueries(predicate, {\n      exact: true\n    })[0];\n  };\n\n  _proto.getQueryByHash = function getQueryByHash(queryHash) {\n    return this.queries[queryHash];\n  };\n\n  _proto.getQueryData = function getQueryData(predicate) {\n    var _this$getQuery;\n\n    return (_this$getQuery = this.getQuery(predicate)) == null ? void 0 : _this$getQuery.state.data;\n  };\n\n  _proto.removeQuery = function removeQuery(query) {\n    if (this.queries[query.queryHash]) {\n      query.destroy();\n      delete this.queries[query.queryHash];\n      this.queriesArray = this.queriesArray.filter(function (x) {\n        return x !== query;\n      });\n      this.notifyGlobalListeners(query);\n    }\n  };\n\n  _proto.removeQueries = function removeQueries(predicate, options) {\n    var _this3 = this;\n\n    this.getQueries(predicate, options).forEach(function (query) {\n      _this3.removeQuery(query);\n    });\n  };\n\n  _proto.cancelQueries = function cancelQueries(predicate, options) {\n    this.getQueries(predicate, options).forEach(function (query) {\n      query.cancel();\n    });\n  }\n  /**\n   * @return Promise resolving to an array with the invalidated queries.\n   */\n  ;\n\n  _proto.invalidateQueries = function invalidateQueries(predicate, options) {\n    var queries = this.getQueries(predicate, options);\n    notifyManager.batch(function () {\n      queries.forEach(function (query) {\n        query.invalidate();\n      });\n    });\n\n    var _ref2 = options || {},\n        _ref2$refetchActive = _ref2.refetchActive,\n        refetchActive = _ref2$refetchActive === void 0 ? true : _ref2$refetchActive,\n        _ref2$refetchInactive = _ref2.refetchInactive,\n        refetchInactive = _ref2$refetchInactive === void 0 ? false : _ref2$refetchInactive;\n\n    if (!refetchInactive && !refetchActive) {\n      return Promise.resolve(queries);\n    }\n\n    var refetchOptions = _extends({}, options);\n\n    if (refetchActive && !refetchInactive) {\n      refetchOptions.active = true;\n    } else if (refetchInactive && !refetchActive) {\n      refetchOptions.active = false;\n    }\n\n    var promise = this.refetchQueries(predicate, refetchOptions);\n\n    if (!(options == null ? void 0 : options.throwOnError)) {\n      promise = promise.catch(function () {\n        return queries;\n      });\n    }\n\n    return promise.then(function () {\n      return queries;\n    });\n  }\n  /**\n   * @return Promise resolving to an array with the refetched queries.\n   */\n  ;\n\n  _proto.refetchQueries = function refetchQueries(predicate, options) {\n    var _this4 = this;\n\n    var promises = [];\n    notifyManager.batch(function () {\n      _this4.getQueries(predicate, options).forEach(function (query) {\n        var promise = query.fetch().then(function () {\n          return query;\n        });\n\n        if (!(options == null ? void 0 : options.throwOnError)) {\n          promise = promise.catch(function () {\n            return query;\n          });\n        }\n\n        promises.push(promise);\n      });\n    });\n    return Promise.all(promises);\n  };\n\n  _proto.resetErrorBoundaries = function resetErrorBoundaries() {\n    this.getQueries().forEach(function (query) {\n      query.state.throwInErrorBoundary = false;\n    });\n  };\n\n  _proto.buildQuery = function buildQuery(queryKey, config) {\n    var resolvedConfig = this.getResolvedQueryConfig(queryKey, config);\n    var query = this.getQueryByHash(resolvedConfig.queryHash);\n\n    if (!query) {\n      query = this.createQuery(resolvedConfig);\n    }\n\n    return query;\n  };\n\n  _proto.createQuery = function createQuery(config) {\n    var query = new Query(config); // A frozen cache does not add new queries to the cache\n\n    if (!this.config.frozen) {\n      this.queries[query.queryHash] = query;\n      this.queriesArray.push(query);\n      this.notifyGlobalListeners(query);\n    }\n\n    return query;\n  } // Parameter syntax\n  ;\n\n  // Implementation\n  _proto.fetchQuery = function fetchQuery(arg1, arg2, arg3) {\n    var _getQueryArgs = getQueryArgs(arg1, arg2, arg3),\n        queryKey = _getQueryArgs[0],\n        config = _getQueryArgs[1];\n\n    var resolvedConfig = this.getResolvedQueryConfig(queryKey, _extends({\n      // https://github.com/tannerlinsley/react-query/issues/652\n      retry: false\n    }, config));\n    var query = this.getQueryByHash(resolvedConfig.queryHash);\n\n    if (!query) {\n      query = this.createQuery(resolvedConfig);\n    }\n\n    if (!query.isStaleByTime(config.staleTime)) {\n      return Promise.resolve(query.state.data);\n    }\n\n    return query.fetch(undefined, resolvedConfig);\n  } // Parameter syntax with optional prefetch options\n  ;\n\n  // Implementation\n  _proto.prefetchQuery = function prefetchQuery(arg1, arg2, arg3, arg4) {\n    if (isPlainObject(arg2) && (arg2.hasOwnProperty('throwOnError') || arg2.hasOwnProperty('force'))) {\n      arg4 = arg2;\n      arg2 = undefined;\n      arg3 = undefined;\n    }\n\n    var _getQueryArgs2 = getQueryArgs(arg1, arg2, arg3, arg4),\n        queryKey = _getQueryArgs2[0],\n        config = _getQueryArgs2[1],\n        options = _getQueryArgs2[2];\n\n    if (options == null ? void 0 : options.force) {\n      config.staleTime = 0;\n    }\n\n    var promise = this.fetchQuery(queryKey, config);\n\n    if (!(options == null ? void 0 : options.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  } // Parameter syntax\n  ;\n\n  // Implementation\n  _proto.watchQuery = function watchQuery(arg1, arg2, arg3) {\n    var _getQueryArgs3 = getQueryArgs(arg1, arg2, arg3),\n        queryKey = _getQueryArgs3[0],\n        config = _getQueryArgs3[1];\n\n    var resolvedConfig = this.getResolvedQueryConfig(queryKey, config);\n    return new QueryObserver(resolvedConfig);\n  };\n\n  _proto.setQueryData = function setQueryData(queryKey, updater, config) {\n    this.buildQuery(queryKey, config).setData(updater);\n  };\n\n  return QueryCache;\n}();\nvar defaultQueryCache = new QueryCache({\n  frozen: isServer\n});\nexport { defaultQueryCache as queryCache };\nexport var queryCaches = [defaultQueryCache];\n/**\n * @deprecated\n */\n\nexport function makeQueryCache(config) {\n  return new QueryCache(config);\n}\nexport function onVisibilityOrOnlineChange(type) {\n  if (isDocumentVisible() && isOnline()) {\n    notifyManager.batch(function () {\n      queryCaches.forEach(function (queryCache) {\n        queryCache.getQueries().forEach(function (query) {\n          query.onInteraction(type);\n        });\n      });\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}