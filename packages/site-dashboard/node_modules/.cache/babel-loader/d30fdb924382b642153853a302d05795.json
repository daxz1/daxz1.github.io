{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { stableStringify } from './utils'; // CONFIG\n\nexport var defaultQueryKeySerializerFn = function defaultQueryKeySerializerFn(queryKey) {\n  try {\n    var arrayQueryKey = Array.isArray(queryKey) ? queryKey : [queryKey];\n    var queryHash = stableStringify(arrayQueryKey);\n    arrayQueryKey = JSON.parse(queryHash);\n    return [queryHash, arrayQueryKey];\n  } catch (_unused) {\n    throw new Error('A valid query key is required!');\n  }\n};\n/**\n * Config merging strategy\n *\n * When using hooks the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the hook query cache.\n * 3. Combined defaults from any config providers in the tree.\n * 4. Query/mutation config provided to the hook.\n *\n * When using a query cache directly the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the query cache.\n * 3. Query/mutation config provided to the query cache method.\n */\n\nexport var DEFAULT_CONFIG = {\n  queries: {\n    cacheTime: 5 * 60 * 1000,\n    enabled: true,\n    notifyOnStatusChange: true,\n    queryFn: function queryFn() {\n      return Promise.reject();\n    },\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    refetchOnMount: true,\n    refetchOnReconnect: true,\n    refetchOnWindowFocus: true,\n    retry: 3,\n    retryDelay: function retryDelay(attemptIndex) {\n      return Math.min(1000 * Math.pow(2, attemptIndex), 30000);\n    },\n    staleTime: 0,\n    structuralSharing: true\n  }\n};\nexport function getDefaultReactQueryConfig() {\n  return {\n    queries: _extends({}, DEFAULT_CONFIG.queries),\n    mutations: _extends({}, DEFAULT_CONFIG.mutations)\n  };\n}\nexport function mergeReactQueryConfigs(a, b) {\n  return {\n    shared: _extends({}, a.shared, b.shared),\n    queries: _extends({}, a.queries, b.queries),\n    mutations: _extends({}, a.mutations, b.mutations)\n  };\n}\nexport function getResolvedQueryConfig(queryCache, queryKey, contextConfig, config) {\n  var queryCacheConfig = queryCache.getDefaultConfig();\n\n  var resolvedConfig = _extends({}, DEFAULT_CONFIG.queries, queryCacheConfig == null ? void 0 : queryCacheConfig.shared, queryCacheConfig == null ? void 0 : queryCacheConfig.queries, contextConfig == null ? void 0 : contextConfig.shared, contextConfig == null ? void 0 : contextConfig.queries, config);\n\n  var result = resolvedConfig.queryKeySerializerFn(queryKey);\n  resolvedConfig.queryCache = queryCache;\n  resolvedConfig.queryHash = result[0];\n  resolvedConfig.queryKey = result[1];\n  return resolvedConfig;\n}\nexport function isResolvedQueryConfig(config) {\n  return Boolean(config.queryHash);\n}\nexport function getResolvedMutationConfig(queryCache, contextConfig, config) {\n  var queryCacheConfig = queryCache.getDefaultConfig();\n  return _extends({}, DEFAULT_CONFIG.mutations, queryCacheConfig == null ? void 0 : queryCacheConfig.shared, queryCacheConfig == null ? void 0 : queryCacheConfig.mutations, contextConfig == null ? void 0 : contextConfig.shared, contextConfig == null ? void 0 : contextConfig.mutations, config);\n}","map":{"version":3,"sources":["/Users/dcheema/Projects/daxz1.github.io/node_modules/react-query/es/core/config.js"],"names":["_extends","stableStringify","defaultQueryKeySerializerFn","queryKey","arrayQueryKey","Array","isArray","queryHash","JSON","parse","_unused","Error","DEFAULT_CONFIG","queries","cacheTime","enabled","notifyOnStatusChange","queryFn","Promise","reject","queryKeySerializerFn","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","retry","retryDelay","attemptIndex","Math","min","pow","staleTime","structuralSharing","getDefaultReactQueryConfig","mutations","mergeReactQueryConfigs","a","b","shared","getResolvedQueryConfig","queryCache","contextConfig","config","queryCacheConfig","getDefaultConfig","resolvedConfig","result","isResolvedQueryConfig","Boolean","getResolvedMutationConfig"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,eAAT,QAAgC,SAAhC,C,CACA;;AACA,OAAO,IAAIC,2BAA2B,GAAG,SAASA,2BAAT,CAAqCC,QAArC,EAA+C;AACtF,MAAI;AACF,QAAIC,aAAa,GAAGC,KAAK,CAACC,OAAN,CAAcH,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAzD;AACA,QAAII,SAAS,GAAGN,eAAe,CAACG,aAAD,CAA/B;AACAA,IAAAA,aAAa,GAAGI,IAAI,CAACC,KAAL,CAAWF,SAAX,CAAhB;AACA,WAAO,CAACA,SAAD,EAAYH,aAAZ,CAAP;AACD,GALD,CAKE,OAAOM,OAAP,EAAgB;AAChB,UAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACD;AACF,CATM;AAUP;;;;;;;;;;;;;;;;;AAiBA,OAAO,IAAIC,cAAc,GAAG;AAC1BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE,IAAI,EAAJ,GAAS,IADb;AAEPC,IAAAA,OAAO,EAAE,IAFF;AAGPC,IAAAA,oBAAoB,EAAE,IAHf;AAIPC,IAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,aAAOC,OAAO,CAACC,MAAR,EAAP;AACD,KANM;AAOPC,IAAAA,oBAAoB,EAAElB,2BAPf;AAQPmB,IAAAA,cAAc,EAAE,IART;AASPC,IAAAA,kBAAkB,EAAE,IATb;AAUPC,IAAAA,oBAAoB,EAAE,IAVf;AAWPC,IAAAA,KAAK,EAAE,CAXA;AAYPC,IAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBC,YAApB,EAAkC;AAC5C,aAAOC,IAAI,CAACC,GAAL,CAAS,OAAOD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYH,YAAZ,CAAhB,EAA2C,KAA3C,CAAP;AACD,KAdM;AAePI,IAAAA,SAAS,EAAE,CAfJ;AAgBPC,IAAAA,iBAAiB,EAAE;AAhBZ;AADiB,CAArB;AAoBP,OAAO,SAASC,0BAAT,GAAsC;AAC3C,SAAO;AACLnB,IAAAA,OAAO,EAAEb,QAAQ,CAAC,EAAD,EAAKY,cAAc,CAACC,OAApB,CADZ;AAELoB,IAAAA,SAAS,EAAEjC,QAAQ,CAAC,EAAD,EAAKY,cAAc,CAACqB,SAApB;AAFd,GAAP;AAID;AACD,OAAO,SAASC,sBAAT,CAAgCC,CAAhC,EAAmCC,CAAnC,EAAsC;AAC3C,SAAO;AACLC,IAAAA,MAAM,EAAErC,QAAQ,CAAC,EAAD,EAAKmC,CAAC,CAACE,MAAP,EAAeD,CAAC,CAACC,MAAjB,CADX;AAELxB,IAAAA,OAAO,EAAEb,QAAQ,CAAC,EAAD,EAAKmC,CAAC,CAACtB,OAAP,EAAgBuB,CAAC,CAACvB,OAAlB,CAFZ;AAGLoB,IAAAA,SAAS,EAAEjC,QAAQ,CAAC,EAAD,EAAKmC,CAAC,CAACF,SAAP,EAAkBG,CAAC,CAACH,SAApB;AAHd,GAAP;AAKD;AACD,OAAO,SAASK,sBAAT,CAAgCC,UAAhC,EAA4CpC,QAA5C,EAAsDqC,aAAtD,EAAqEC,MAArE,EAA6E;AAClF,MAAIC,gBAAgB,GAAGH,UAAU,CAACI,gBAAX,EAAvB;;AAEA,MAAIC,cAAc,GAAG5C,QAAQ,CAAC,EAAD,EAAKY,cAAc,CAACC,OAApB,EAA6B6B,gBAAgB,IAAI,IAApB,GAA2B,KAAK,CAAhC,GAAoCA,gBAAgB,CAACL,MAAlF,EAA0FK,gBAAgB,IAAI,IAApB,GAA2B,KAAK,CAAhC,GAAoCA,gBAAgB,CAAC7B,OAA/I,EAAwJ2B,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACH,MAAvM,EAA+MG,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAAC3B,OAA9P,EAAuQ4B,MAAvQ,CAA7B;;AAEA,MAAII,MAAM,GAAGD,cAAc,CAACxB,oBAAf,CAAoCjB,QAApC,CAAb;AACAyC,EAAAA,cAAc,CAACL,UAAf,GAA4BA,UAA5B;AACAK,EAAAA,cAAc,CAACrC,SAAf,GAA2BsC,MAAM,CAAC,CAAD,CAAjC;AACAD,EAAAA,cAAc,CAACzC,QAAf,GAA0B0C,MAAM,CAAC,CAAD,CAAhC;AACA,SAAOD,cAAP;AACD;AACD,OAAO,SAASE,qBAAT,CAA+BL,MAA/B,EAAuC;AAC5C,SAAOM,OAAO,CAACN,MAAM,CAAClC,SAAR,CAAd;AACD;AACD,OAAO,SAASyC,yBAAT,CAAmCT,UAAnC,EAA+CC,aAA/C,EAA8DC,MAA9D,EAAsE;AAC3E,MAAIC,gBAAgB,GAAGH,UAAU,CAACI,gBAAX,EAAvB;AACA,SAAO3C,QAAQ,CAAC,EAAD,EAAKY,cAAc,CAACqB,SAApB,EAA+BS,gBAAgB,IAAI,IAApB,GAA2B,KAAK,CAAhC,GAAoCA,gBAAgB,CAACL,MAApF,EAA4FK,gBAAgB,IAAI,IAApB,GAA2B,KAAK,CAAhC,GAAoCA,gBAAgB,CAACT,SAAjJ,EAA4JO,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACH,MAA3M,EAAmNG,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACP,SAAlQ,EAA6QQ,MAA7Q,CAAf;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { stableStringify } from './utils';\n// CONFIG\nexport var defaultQueryKeySerializerFn = function defaultQueryKeySerializerFn(queryKey) {\n  try {\n    var arrayQueryKey = Array.isArray(queryKey) ? queryKey : [queryKey];\n    var queryHash = stableStringify(arrayQueryKey);\n    arrayQueryKey = JSON.parse(queryHash);\n    return [queryHash, arrayQueryKey];\n  } catch (_unused) {\n    throw new Error('A valid query key is required!');\n  }\n};\n/**\n * Config merging strategy\n *\n * When using hooks the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the hook query cache.\n * 3. Combined defaults from any config providers in the tree.\n * 4. Query/mutation config provided to the hook.\n *\n * When using a query cache directly the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the query cache.\n * 3. Query/mutation config provided to the query cache method.\n */\n\nexport var DEFAULT_CONFIG = {\n  queries: {\n    cacheTime: 5 * 60 * 1000,\n    enabled: true,\n    notifyOnStatusChange: true,\n    queryFn: function queryFn() {\n      return Promise.reject();\n    },\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    refetchOnMount: true,\n    refetchOnReconnect: true,\n    refetchOnWindowFocus: true,\n    retry: 3,\n    retryDelay: function retryDelay(attemptIndex) {\n      return Math.min(1000 * Math.pow(2, attemptIndex), 30000);\n    },\n    staleTime: 0,\n    structuralSharing: true\n  }\n};\nexport function getDefaultReactQueryConfig() {\n  return {\n    queries: _extends({}, DEFAULT_CONFIG.queries),\n    mutations: _extends({}, DEFAULT_CONFIG.mutations)\n  };\n}\nexport function mergeReactQueryConfigs(a, b) {\n  return {\n    shared: _extends({}, a.shared, b.shared),\n    queries: _extends({}, a.queries, b.queries),\n    mutations: _extends({}, a.mutations, b.mutations)\n  };\n}\nexport function getResolvedQueryConfig(queryCache, queryKey, contextConfig, config) {\n  var queryCacheConfig = queryCache.getDefaultConfig();\n\n  var resolvedConfig = _extends({}, DEFAULT_CONFIG.queries, queryCacheConfig == null ? void 0 : queryCacheConfig.shared, queryCacheConfig == null ? void 0 : queryCacheConfig.queries, contextConfig == null ? void 0 : contextConfig.shared, contextConfig == null ? void 0 : contextConfig.queries, config);\n\n  var result = resolvedConfig.queryKeySerializerFn(queryKey);\n  resolvedConfig.queryCache = queryCache;\n  resolvedConfig.queryHash = result[0];\n  resolvedConfig.queryKey = result[1];\n  return resolvedConfig;\n}\nexport function isResolvedQueryConfig(config) {\n  return Boolean(config.queryHash);\n}\nexport function getResolvedMutationConfig(queryCache, contextConfig, config) {\n  var queryCacheConfig = queryCache.getDefaultConfig();\n  return _extends({}, DEFAULT_CONFIG.mutations, queryCacheConfig == null ? void 0 : queryCacheConfig.shared, queryCacheConfig == null ? void 0 : queryCacheConfig.mutations, contextConfig == null ? void 0 : contextConfig.shared, contextConfig == null ? void 0 : contextConfig.mutations, config);\n}"]},"metadata":{},"sourceType":"module"}